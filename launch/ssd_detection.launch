<launch>

  <node pkg="ssd_detection" type="ssd_detection" name="ssd_detection" output="screen">
	<param name="deployFileName" value="/home/yh/caffe/models/VGGNet/VOC0712/SSD_600x180/deploy.prototxt"/>
	<!--param name="deployFileName" value="/home/yh/caffe/models/VGGNet/VOC0712.88/SSD_990x300/deploy.prototxt"/-->
	<param name="caffeModelFileName" value="/home/yh/caffe/models/VGGNet/VOC0712/SSD_600x180/VGG_VOC0712_SSD_600x180_iter_60000.caffemodel"/>
	<!--param name="caffeModelFileName" value="/home/yh/caffe/models/VGGNet/VOC0712.88/SSD_990x300/VGG_VOC0712_SSD_990x300_iter_60000.caffemodel"/-->
	<param name="picturesFileName" value="/home/yh/caffe/fileNames.txt.TL"/>	
        <param name="calibrationFileName" value="$(find ssd_detection)/script/calib.txt"/>
        <param name="cameraFileName" value="$(find ssd_detection)/script/left_opencv.yaml"/>	
	
  </node>

<node pkg="rviz" type="rviz" name="rviz" args="-d $(find ssd_detection)/script/cloud.rviz" output="screen"/>


<!-- zed_launch -->

  <arg name="pi/2" value="1.5707963267948966" />
  <arg name="online" default="false"/>
  <arg name="rectify" default="false"/>
  <arg name="rate" default="1.0" />
  <arg name="need_split" default="true" />

  <arg name="bag_file" default="/home/yh/thomas_2017-03-09-16-31-34.bag"/>


  <!--Source: from live or decompress from bag-->
  <!--Live-->
  <node pkg="usb_cam" type="usb_cam_node" name="camera" output="screen" if="$(arg online)" required="true">
    <param name="video_device" value="/dev/video1"/>
    <param name="image_width" value="1344"/>
    <param name="image_height" value="376"/>
    <param name="pixel_format" value="yuyv"/>
    <param name="camera_frame_id" value="zed"/>
    <param name="camera_name" value="zed"/>
  </node>
  <!--Read from bag and decompress it-->
  <group unless="$(arg online)">
    <param name="/use_sim_time" value="true"/>
    <node pkg="rosbag" type="play" name="player" output="screen" args="--clock --rate $(arg rate) $(arg bag_file)" required="true"/>
    <node pkg="image_transport" type="republish" name="republisher" args="compressed in:=/camera/image_raw out:=/camera/image_raw_decompressed"/>
  </group>


  <!--Split it-->
  <node pkg="ssd_detection" type="split.py" name="split" output="screen" if="$(arg need_split)"/>

  <group unless="$(arg need_split)">
    <node pkg="image_transport" type="republish" name="republisher_left" args="compressed in:=/camera/left/image_rect_color raw out:=/camera/left/image_rect_color"/>
    <node pkg="image_transport" type="republish" name="republisher_right" args="compressed in:=/camera/right/image_rect_color raw out:=/camera/right/image_rect_color"/>
    <node pkg="ssd_detection" type="ci.py" name="ci" output="screen"/>
  </group>

  <!--Do undistortion & rectification-->
  <group ns="/camera/left" if="$(arg rectify)">
    <node pkg="image_proc" type="image_proc" name="left_image_proc">
      <param name="image_raw" value="/camera/left/image_raw"/>
      <param name="camera_info" value="/camera/left/camera_info"/>
    </node>
  </group>
  <group ns="/camera/right" if="$(arg rectify)">
    <node pkg="image_proc" type="image_proc" name="right_image_proc">
      <param name="image_raw" value="/camera/right/image_raw"/>
      <param name="camera_info" value="/camera/right/camera_info"/>
    </node>
  </group>

</launch>
